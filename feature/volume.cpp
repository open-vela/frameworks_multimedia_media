/*
 * This file is auto-generated by jsongensource.py, Do not modify it directly!
*/

/*
 * Copyright (C) 2023 Xiaomi Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/* clang-format off */

#include "volume.h"
#include "ajs_features_init.h"
#include "feature_description.h"

#define countof(x) (sizeof(x) / sizeof(x[0]))

/****** for JIDL struct 'GetRet' ******/
static ObjectMember system_volume_GetRet_struct_members[] = {
    { "value", FT_DOUBLE, offsetof(system_volume_GetRet, value), sizeof(FtDouble) },
    { nullptr },
};

// complex defination
static const ObjectMapType system_volume_GetRet_struct_type {
    .header = { .type = COMPLEX_STRUCT_MAP, .size = sizeof(system_volume_GetRet) },
    .members = system_volume_GetRet_struct_members
};

system_volume_GetRet* system_volumeMallocGetRet () {
    return (system_volume_GetRet*)FeatureMalloc(
        sizeof(system_volume_GetRet), FT_MK_COMPLEX(&system_volume_GetRet_struct_type));
}


/****** for JIDL callback 'success_cb' ******/
static const FeatureType system_volume_success_cb_parameters[] = {
    FT_MK_COMPLEX_REF(&system_volume_GetRet_struct_type),
    FT_PARAM_END
};

static const CallbackType system_volume_success_cb_callback_type {
    .header = { .type = COMPLEX_CALLBACK, .size = sizeof(FtCallbackId) },
    .parameters = system_volume_success_cb_parameters,
    .return_type = FT_VOID
};


/****** for JIDL callback 'fail_cb' ******/
static const FeatureType system_volume_fail_cb_parameters[] = {
    FT_STRING,
    FT_INT,
    FT_PARAM_END
};

static const CallbackType system_volume_fail_cb_callback_type {
    .header = { .type = COMPLEX_CALLBACK, .size = sizeof(FtCallbackId) },
    .parameters = system_volume_fail_cb_parameters,
    .return_type = FT_VOID
};


/****** for JIDL callback 'complete_cb' ******/
static const FeatureType system_volume_complete_cb_parameters[] = {
    FT_STRING,
    FT_PARAM_END
};

static const CallbackType system_volume_complete_cb_callback_type {
    .header = { .type = COMPLEX_CALLBACK, .size = sizeof(FtCallbackId) },
    .parameters = system_volume_complete_cb_parameters,
    .return_type = FT_VOID
};


/****** for JIDL struct 'GetInfo' ******/
static ObjectMember system_volume_GetInfo_struct_members[] = {
    { "success", FT_MK_COMPLEX(&system_volume_success_cb_callback_type), offsetof(system_volume_GetInfo, success), sizeof(FtCallbackId) },
    { "fail", FT_MK_COMPLEX(&system_volume_fail_cb_callback_type), offsetof(system_volume_GetInfo, fail), sizeof(FtCallbackId) },
    { "complete", FT_MK_COMPLEX(&system_volume_complete_cb_callback_type), offsetof(system_volume_GetInfo, complete), sizeof(FtCallbackId) },
    { nullptr },
};

// complex defination
static const ObjectMapType system_volume_GetInfo_struct_type {
    .header = { .type = COMPLEX_STRUCT_MAP, .size = sizeof(system_volume_GetInfo) },
    .members = system_volume_GetInfo_struct_members
};

system_volume_GetInfo* system_volumeMallocGetInfo () {
    return (system_volume_GetInfo*)FeatureMalloc(
        sizeof(system_volume_GetInfo), FT_MK_COMPLEX(&system_volume_GetInfo_struct_type));
}


/****** for JIDL struct 'SetInfo' ******/
static ObjectMember system_volume_SetInfo_struct_members[] = {
    { "value", FT_DOUBLE, offsetof(system_volume_SetInfo, value), sizeof(FtDouble) },
    { "success", FT_MK_COMPLEX(&system_volume_success_cb_callback_type), offsetof(system_volume_SetInfo, success), sizeof(FtCallbackId) },
    { "fail", FT_MK_COMPLEX(&system_volume_fail_cb_callback_type), offsetof(system_volume_SetInfo, fail), sizeof(FtCallbackId) },
    { "complete", FT_MK_COMPLEX(&system_volume_complete_cb_callback_type), offsetof(system_volume_SetInfo, complete), sizeof(FtCallbackId) },
    { nullptr },
};

// complex defination
static const ObjectMapType system_volume_SetInfo_struct_type {
    .header = { .type = COMPLEX_STRUCT_MAP, .size = sizeof(system_volume_SetInfo) },
    .members = system_volume_SetInfo_struct_members
};

system_volume_SetInfo* system_volumeMallocSetInfo () {
    return (system_volume_SetInfo*)FeatureMalloc(
        sizeof(system_volume_SetInfo), FT_MK_COMPLEX(&system_volume_SetInfo_struct_type));
}


/****** for JIDL function 'setMediaValue' ******/
static const FeatureType system_volume_setMediaValue_parameters[] = {
    FT_MK_COMPLEX_REF(&system_volume_SetInfo_struct_type),
    FT_PARAM_END
};

static const MemberMethod system_volume_setMediaValue_member_method = {
    .func = { .callback = FFI_FN(system_volume_wrap_setMediaValue) },
    .parameters = system_volume_setMediaValue_parameters,
    .return_type = FT_VOID,
};


/****** for JIDL function 'getMediaValue' ******/
static const FeatureType system_volume_getMediaValue_parameters[] = {
    FT_MK_COMPLEX_REF(&system_volume_GetInfo_struct_type),
    FT_PARAM_END
};

static const MemberMethod system_volume_getMediaValue_member_method = {
    .func = { .callback = FFI_FN(system_volume_wrap_getMediaValue) },
    .parameters = system_volume_getMediaValue_parameters,
    .return_type = FT_VOID,
};


// members
static const Member system_volume_members[] = {
    {
        .type = MEMBER_METHOD,
        .name = "setMediaValue",
        .method = system_volume_setMediaValue_member_method,
    },
    {
        .type = MEMBER_METHOD,
        .name = "getMediaValue",
        .method = system_volume_getMediaValue_member_method,
    },
};

// callbacks
static const struct FeatureCallbacks system_volume_callbacks {
    system_volume_onRegister,
    system_volume_onCreate,
    system_volume_onRequired,
    system_volume_onDetached,
    system_volume_onDestroy,
    system_volume_onUnregister
};

static const FeatureDescription system_volume_desc = {
    .version = 1,
    .name = "system.volume",
    .description = "system.volume",
    { .dynamic = false },
    .native_callbacks = &system_volume_callbacks,
    .member_count = countof(system_volume_members),
    .members = system_volume_members,
};

QAPPFEATURE_INIT(system_volume)
{
    return mgr->registerFeature(features, &system_volume_desc);
}
/* clang-format on */
