/*
 * This file is auto-generated by jsongensource.py, Do not modify it directly!
 */

/*
 * Copyright (C) 2023 Xiaomi Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/* clang-format off */

#ifndef JSON_AST_GEN_MODULE_SYSTEM_AUDIO_H_
#define JSON_AST_GEN_MODULE_SYSTEM_AUDIO_H_

#include "feature_exports.h"
#include "feature_log.h"

#include <ffi.h>
#include <assert.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// FeatureCallbacks to be implemented
void system_audio_onRegister(const char* feature_name);
void system_audio_onCreate(FeatureRuntimeContext ctx, FeatureProtoHandle handle);
void system_audio_onRequired(FeatureRuntimeContext ctx, FeatureInstanceHandle handle);
void system_audio_onDetached(FeatureRuntimeContext ctx, FeatureInstanceHandle handle);
void system_audio_onDestroy(FeatureRuntimeContext ctx, FeatureProtoHandle handle);
void system_audio_onUnregister(const char* feature_name);

// Struct defines
typedef struct _AudioState {
  FtString state;
  FtString src;
  FtFloat currentTime;
  FtBool autoplay;
  FtBool loop;
  FtFloat volume;
  FtBool mute;
  FtFloat duration;
} system_audio_AudioState;

system_audio_AudioState* system_audioMallocAudioState(void);

typedef struct _MetaInfo {
  FtString title;
  FtString album;
  FtString artist;
} system_audio_MetaInfo;

system_audio_MetaInfo* system_audioMallocMetaInfo(void);

typedef struct _GetPalyStateParam {
  FtCallbackId success;
  FtCallbackId fail;
  FtCallbackId complete;
} system_audio_GetPalyStateParam;

system_audio_GetPalyStateParam* system_audioMallocGetPalyStateParam(void);


// Function wrappers to be implemented
void system_audio_wrap_play(FeatureInstanceHandle feature, union AppendData append_data);
void system_audio_wrap_pause(FeatureInstanceHandle feature, union AppendData append_data);
void system_audio_wrap_stop(FeatureInstanceHandle feature, union AppendData append_data);
void system_audio_wrap_getPlayState(FeatureInstanceHandle feature, union AppendData append_data, system_audio_GetPalyStateParam * p);

// Interface constructors

// interface vtable functions to be implemented

// Property getters and setters to be implemented
FtString system_audio_get_src(void* feature, union AppendData append_data);
void system_audio_set_src(void* feature, union AppendData append_data, FtString src);
void system_audio_set_meta(void* feature, union AppendData append_data, system_audio_MetaInfo * meta);
FtFloat system_audio_get_currentTime(void* feature, union AppendData append_data);
void system_audio_set_currentTime(void* feature, union AppendData append_data, FtFloat currentTime);
FtFloat system_audio_get_duration(void* feature, union AppendData append_data);
FtBool system_audio_get_autoplay(void* feature, union AppendData append_data);
void system_audio_set_autoplay(void* feature, union AppendData append_data, FtBool autoplay);
FtBool system_audio_get_loop(void* feature, union AppendData append_data);
void system_audio_set_loop(void* feature, union AppendData append_data, FtBool loop);
FtFloat system_audio_get_volume(void* feature, union AppendData append_data);
void system_audio_set_volume(void* feature, union AppendData append_data, FtFloat volume);
FtBool system_audio_get_muted(void* feature, union AppendData append_data);
void system_audio_set_muted(void* feature, union AppendData append_data, FtBool muted);
FtString system_audio_get_streamType(void* feature, union AppendData append_data);
void system_audio_set_onplay(void* feature, union AppendData append_data, FtCallbackId onplay);
void system_audio_set_onpause(void* feature, union AppendData append_data, FtCallbackId onpause);
void system_audio_set_onstop(void* feature, union AppendData append_data, FtCallbackId onstop);
void system_audio_set_onloadeddata(void* feature, union AppendData append_data, FtCallbackId onloadeddata);
void system_audio_set_onended(void* feature, union AppendData append_data, FtCallbackId onended);
void system_audio_set_ondurationchange(void* feature, union AppendData append_data, FtCallbackId ondurationchange);
void system_audio_set_ontimeupdate(void* feature, union AppendData append_data, FtCallbackId ontimeupdate);
void system_audio_set_onerror(void* feature, union AppendData append_data, FtCallbackId onerror);

// Array malloc functions

#endif // JSON_AST_GEN_MODULE_SYSTEM_AUDIO_H_
/* clang-format on */
